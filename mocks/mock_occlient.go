// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/redhat-developer/ocdev/pkg/occlient (interfaces: OpenShiftClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	occlient "github.com/redhat-developer/ocdev/pkg/occlient"
	reflect "reflect"
)

// MockOpenShiftClient is a mock of OpenShiftClient interface
type MockOpenShiftClient struct {
	ctrl     *gomock.Controller
	recorder *MockOpenShiftClientMockRecorder
}

// MockOpenShiftClientMockRecorder is the mock recorder for MockOpenShiftClient
type MockOpenShiftClientMockRecorder struct {
	mock *MockOpenShiftClient
}

// NewMockOpenShiftClient creates a new mock instance
func NewMockOpenShiftClient(ctrl *gomock.Controller) *MockOpenShiftClient {
	mock := &MockOpenShiftClient{ctrl: ctrl}
	mock.recorder = &MockOpenShiftClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOpenShiftClient) EXPECT() *MockOpenShiftClientMockRecorder {
	return m.recorder
}

// CreateNewProject mocks base method
func (m *MockOpenShiftClient) CreateNewProject(arg0 string) error {
	ret := m.ctrl.Call(m, "CreateNewProject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewProject indicates an expected call of CreateNewProject
func (mr *MockOpenShiftClientMockRecorder) CreateNewProject(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewProject", reflect.TypeOf((*MockOpenShiftClient)(nil).CreateNewProject), arg0)
}

// Delete mocks base method
func (m *MockOpenShiftClient) Delete(arg0, arg1 string, arg2 map[string]string) (string, error) {
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockOpenShiftClientMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOpenShiftClient)(nil).Delete), arg0, arg1, arg2)
}

// DeleteProject mocks base method
func (m *MockOpenShiftClient) DeleteProject(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteProject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject
func (mr *MockOpenShiftClientMockRecorder) DeleteProject(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockOpenShiftClient)(nil).DeleteProject), arg0)
}

// GetCurrentProjectName mocks base method
func (m *MockOpenShiftClient) GetCurrentProjectName() (string, error) {
	ret := m.ctrl.Call(m, "GetCurrentProjectName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentProjectName indicates an expected call of GetCurrentProjectName
func (mr *MockOpenShiftClientMockRecorder) GetCurrentProjectName() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentProjectName", reflect.TypeOf((*MockOpenShiftClient)(nil).GetCurrentProjectName))
}

// GetLabelValues mocks base method
func (m *MockOpenShiftClient) GetLabelValues(arg0, arg1, arg2 string) ([]string, error) {
	ret := m.ctrl.Call(m, "GetLabelValues", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLabelValues indicates an expected call of GetLabelValues
func (mr *MockOpenShiftClientMockRecorder) GetLabelValues(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabelValues", reflect.TypeOf((*MockOpenShiftClient)(nil).GetLabelValues), arg0, arg1, arg2)
}

// GetProjects mocks base method
func (m *MockOpenShiftClient) GetProjects() (string, error) {
	ret := m.ctrl.Call(m, "GetProjects")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects
func (mr *MockOpenShiftClientMockRecorder) GetProjects() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockOpenShiftClient)(nil).GetProjects))
}

// NewAppS2I mocks base method
func (m *MockOpenShiftClient) NewAppS2I(arg0, arg1, arg2 string, arg3 map[string]string) (string, error) {
	ret := m.ctrl.Call(m, "NewAppS2I", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAppS2I indicates an expected call of NewAppS2I
func (mr *MockOpenShiftClientMockRecorder) NewAppS2I(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAppS2I", reflect.TypeOf((*MockOpenShiftClient)(nil).NewAppS2I), arg0, arg1, arg2, arg3)
}

// NewAppS2IEmpty mocks base method
func (m *MockOpenShiftClient) NewAppS2IEmpty(arg0, arg1 string, arg2 map[string]string) (string, error) {
	ret := m.ctrl.Call(m, "NewAppS2IEmpty", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAppS2IEmpty indicates an expected call of NewAppS2IEmpty
func (mr *MockOpenShiftClientMockRecorder) NewAppS2IEmpty(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAppS2IEmpty", reflect.TypeOf((*MockOpenShiftClient)(nil).NewAppS2IEmpty), arg0, arg1, arg2)
}

// SetVolumes mocks base method
func (m *MockOpenShiftClient) SetVolumes(arg0 *occlient.VolumeConfig, arg1 *occlient.VolumeOperations) (string, error) {
	ret := m.ctrl.Call(m, "SetVolumes", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetVolumes indicates an expected call of SetVolumes
func (mr *MockOpenShiftClientMockRecorder) SetVolumes(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVolumes", reflect.TypeOf((*MockOpenShiftClient)(nil).SetVolumes), arg0, arg1)
}

// StartBuild mocks base method
func (m *MockOpenShiftClient) StartBuild(arg0, arg1 string) (string, error) {
	ret := m.ctrl.Call(m, "StartBuild", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBuild indicates an expected call of StartBuild
func (mr *MockOpenShiftClientMockRecorder) StartBuild(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBuild", reflect.TypeOf((*MockOpenShiftClient)(nil).StartBuild), arg0, arg1)
}
